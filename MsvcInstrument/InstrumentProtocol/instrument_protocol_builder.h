#ifndef INSTRUMENT_PROTOCOL_BUILDER_H
#define INSTRUMENT_PROTOCOL_BUILDER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#ifndef INSTRUMENT_PROTOCOL_READER_H
#include "instrument_protocol_reader.h"
#endif
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#include "flatbuffers_common_builder.h"
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension "bin"
#endif

#define __InstrumentProtocol_CommandCode_formal_args , InstrumentProtocol_CommandCode_enum_t v0
#define __InstrumentProtocol_CommandCode_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, InstrumentProtocol_CommandCode, InstrumentProtocol_CommandCode_enum_t)

typedef flatbuffers_union_ref_t InstrumentProtocol_MessageType_union_ref_t;
typedef flatbuffers_union_vec_ref_t InstrumentProtocol_MessageType_union_vec_ref_t;
static InstrumentProtocol_MessageType_union_ref_t InstrumentProtocol_MessageType_clone(flatbuffers_builder_t *B, InstrumentProtocol_MessageType_union_t t);

static const flatbuffers_voffset_t __InstrumentProtocol_Command_required[] = { 0 };
typedef flatbuffers_ref_t InstrumentProtocol_Command_ref_t;
static InstrumentProtocol_Command_ref_t InstrumentProtocol_Command_clone(flatbuffers_builder_t *B, InstrumentProtocol_Command_table_t t);
__flatbuffers_build_table(flatbuffers_, InstrumentProtocol_Command, 1)

static const flatbuffers_voffset_t __InstrumentProtocol_Configuration_required[] = { 0 };
typedef flatbuffers_ref_t InstrumentProtocol_Configuration_ref_t;
static InstrumentProtocol_Configuration_ref_t InstrumentProtocol_Configuration_clone(flatbuffers_builder_t *B, InstrumentProtocol_Configuration_table_t t);
__flatbuffers_build_table(flatbuffers_, InstrumentProtocol_Configuration, 2)

static const flatbuffers_voffset_t __InstrumentProtocol_Measurement_required[] = { 0 };
typedef flatbuffers_ref_t InstrumentProtocol_Measurement_ref_t;
static InstrumentProtocol_Measurement_ref_t InstrumentProtocol_Measurement_clone(flatbuffers_builder_t *B, InstrumentProtocol_Measurement_table_t t);
__flatbuffers_build_table(flatbuffers_, InstrumentProtocol_Measurement, 1)

static const flatbuffers_voffset_t __InstrumentProtocol_Message_required[] = { 0 };
typedef flatbuffers_ref_t InstrumentProtocol_Message_ref_t;
static InstrumentProtocol_Message_ref_t InstrumentProtocol_Message_clone(flatbuffers_builder_t *B, InstrumentProtocol_Message_table_t t);
__flatbuffers_build_table(flatbuffers_, InstrumentProtocol_Message, 2)

#define __InstrumentProtocol_Command_formal_args , InstrumentProtocol_CommandCode_enum_t v0
#define __InstrumentProtocol_Command_call_args , v0
static inline InstrumentProtocol_Command_ref_t InstrumentProtocol_Command_create(flatbuffers_builder_t *B __InstrumentProtocol_Command_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, InstrumentProtocol_Command, InstrumentProtocol_Command_file_identifier, InstrumentProtocol_Command_type_identifier)

#define __InstrumentProtocol_Configuration_formal_args , uint32_t v0, uint32_t v1
#define __InstrumentProtocol_Configuration_call_args , v0, v1
static inline InstrumentProtocol_Configuration_ref_t InstrumentProtocol_Configuration_create(flatbuffers_builder_t *B __InstrumentProtocol_Configuration_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, InstrumentProtocol_Configuration, InstrumentProtocol_Configuration_file_identifier, InstrumentProtocol_Configuration_type_identifier)

#define __InstrumentProtocol_Measurement_formal_args , flatbuffers_float_vec_ref_t v0
#define __InstrumentProtocol_Measurement_call_args , v0
static inline InstrumentProtocol_Measurement_ref_t InstrumentProtocol_Measurement_create(flatbuffers_builder_t *B __InstrumentProtocol_Measurement_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, InstrumentProtocol_Measurement, InstrumentProtocol_Measurement_file_identifier, InstrumentProtocol_Measurement_type_identifier)

#define __InstrumentProtocol_Message_formal_args , InstrumentProtocol_MessageType_union_ref_t v1
#define __InstrumentProtocol_Message_call_args , v1
static inline InstrumentProtocol_Message_ref_t InstrumentProtocol_Message_create(flatbuffers_builder_t *B __InstrumentProtocol_Message_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, InstrumentProtocol_Message, InstrumentProtocol_Message_file_identifier, InstrumentProtocol_Message_type_identifier)

static inline InstrumentProtocol_MessageType_union_ref_t InstrumentProtocol_MessageType_as_NONE(void)
{ InstrumentProtocol_MessageType_union_ref_t uref; uref.type = InstrumentProtocol_MessageType_NONE; uref.value = 0; return uref; }
static inline InstrumentProtocol_MessageType_union_ref_t InstrumentProtocol_MessageType_as_Command(InstrumentProtocol_Command_ref_t ref)
{ InstrumentProtocol_MessageType_union_ref_t uref; uref.type = InstrumentProtocol_MessageType_Command; uref.value = ref; return uref; }
static inline InstrumentProtocol_MessageType_union_ref_t InstrumentProtocol_MessageType_as_Configuration(InstrumentProtocol_Configuration_ref_t ref)
{ InstrumentProtocol_MessageType_union_ref_t uref; uref.type = InstrumentProtocol_MessageType_Configuration; uref.value = ref; return uref; }
static inline InstrumentProtocol_MessageType_union_ref_t InstrumentProtocol_MessageType_as_Measurement(InstrumentProtocol_Measurement_ref_t ref)
{ InstrumentProtocol_MessageType_union_ref_t uref; uref.type = InstrumentProtocol_MessageType_Measurement; uref.value = ref; return uref; }
__flatbuffers_build_union_vector(flatbuffers_, InstrumentProtocol_MessageType)

static InstrumentProtocol_MessageType_union_ref_t InstrumentProtocol_MessageType_clone(flatbuffers_builder_t *B, InstrumentProtocol_MessageType_union_t u)
{
    switch (u.type) {
    case 1: return InstrumentProtocol_MessageType_as_Command(InstrumentProtocol_Command_clone(B, (InstrumentProtocol_Command_table_t)u.value));
    case 2: return InstrumentProtocol_MessageType_as_Configuration(InstrumentProtocol_Configuration_clone(B, (InstrumentProtocol_Configuration_table_t)u.value));
    case 3: return InstrumentProtocol_MessageType_as_Measurement(InstrumentProtocol_Measurement_clone(B, (InstrumentProtocol_Measurement_table_t)u.value));
    default: return InstrumentProtocol_MessageType_as_NONE();
    }
}

__flatbuffers_build_scalar_field(0, flatbuffers_, InstrumentProtocol_Command_code, InstrumentProtocol_CommandCode, InstrumentProtocol_CommandCode_enum_t, 1, 1, INT8_C(0), InstrumentProtocol_Command)

static inline InstrumentProtocol_Command_ref_t InstrumentProtocol_Command_create(flatbuffers_builder_t *B __InstrumentProtocol_Command_formal_args)
{
    if (InstrumentProtocol_Command_start(B)
        || InstrumentProtocol_Command_code_add(B, v0)) {
        return 0;
    }
    return InstrumentProtocol_Command_end(B);
}

static InstrumentProtocol_Command_ref_t InstrumentProtocol_Command_clone(flatbuffers_builder_t *B, InstrumentProtocol_Command_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (InstrumentProtocol_Command_start(B)
        || InstrumentProtocol_Command_code_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, InstrumentProtocol_Command_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, InstrumentProtocol_Configuration_measurements_per_second, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), InstrumentProtocol_Configuration)
__flatbuffers_build_scalar_field(1, flatbuffers_, InstrumentProtocol_Configuration_samples_per_measurement, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), InstrumentProtocol_Configuration)

static inline InstrumentProtocol_Configuration_ref_t InstrumentProtocol_Configuration_create(flatbuffers_builder_t *B __InstrumentProtocol_Configuration_formal_args)
{
    if (InstrumentProtocol_Configuration_start(B)
        || InstrumentProtocol_Configuration_measurements_per_second_add(B, v0)
        || InstrumentProtocol_Configuration_samples_per_measurement_add(B, v1)) {
        return 0;
    }
    return InstrumentProtocol_Configuration_end(B);
}

static InstrumentProtocol_Configuration_ref_t InstrumentProtocol_Configuration_clone(flatbuffers_builder_t *B, InstrumentProtocol_Configuration_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (InstrumentProtocol_Configuration_start(B)
        || InstrumentProtocol_Configuration_measurements_per_second_pick(B, t)
        || InstrumentProtocol_Configuration_samples_per_measurement_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, InstrumentProtocol_Configuration_end(B));
}

__flatbuffers_build_vector_field(0, flatbuffers_, InstrumentProtocol_Measurement_data, flatbuffers_float, float, InstrumentProtocol_Measurement)

static inline InstrumentProtocol_Measurement_ref_t InstrumentProtocol_Measurement_create(flatbuffers_builder_t *B __InstrumentProtocol_Measurement_formal_args)
{
    if (InstrumentProtocol_Measurement_start(B)
        || InstrumentProtocol_Measurement_data_add(B, v0)) {
        return 0;
    }
    return InstrumentProtocol_Measurement_end(B);
}

static InstrumentProtocol_Measurement_ref_t InstrumentProtocol_Measurement_clone(flatbuffers_builder_t *B, InstrumentProtocol_Measurement_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (InstrumentProtocol_Measurement_start(B)
        || InstrumentProtocol_Measurement_data_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, InstrumentProtocol_Measurement_end(B));
}

__flatbuffers_build_union_field(1, flatbuffers_, InstrumentProtocol_Message_message_type, InstrumentProtocol_MessageType, InstrumentProtocol_Message)
__flatbuffers_build_union_table_value_field(flatbuffers_, InstrumentProtocol_Message_message_type, InstrumentProtocol_MessageType, Command, InstrumentProtocol_Command)
__flatbuffers_build_union_table_value_field(flatbuffers_, InstrumentProtocol_Message_message_type, InstrumentProtocol_MessageType, Configuration, InstrumentProtocol_Configuration)
__flatbuffers_build_union_table_value_field(flatbuffers_, InstrumentProtocol_Message_message_type, InstrumentProtocol_MessageType, Measurement, InstrumentProtocol_Measurement)

static inline InstrumentProtocol_Message_ref_t InstrumentProtocol_Message_create(flatbuffers_builder_t *B __InstrumentProtocol_Message_formal_args)
{
    if (InstrumentProtocol_Message_start(B)
        || InstrumentProtocol_Message_message_type_add_value(B, v1)
        || InstrumentProtocol_Message_message_type_add_type(B, v1.type)) {
        return 0;
    }
    return InstrumentProtocol_Message_end(B);
}

static InstrumentProtocol_Message_ref_t InstrumentProtocol_Message_clone(flatbuffers_builder_t *B, InstrumentProtocol_Message_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (InstrumentProtocol_Message_start(B)
        || InstrumentProtocol_Message_message_type_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, InstrumentProtocol_Message_end(B));
}

#include "flatcc/flatcc_epilogue.h"
#endif /* INSTRUMENT_PROTOCOL_BUILDER_H */
