#ifndef INSTRUMENT_PROTOCOL_READER_H
#define INSTRUMENT_PROTOCOL_READER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#ifndef FLATBUFFERS_COMMON_READER_H
#include "flatbuffers_common_reader.h"
#endif
#include "flatcc/flatcc_flatbuffers.h"
#ifndef __alignas_is_defined
#include <stdalign.h>
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension "bin"
#endif


typedef const struct InstrumentProtocol_Command_table *InstrumentProtocol_Command_table_t;
typedef struct InstrumentProtocol_Command_table *InstrumentProtocol_Command_mutable_table_t;
typedef const flatbuffers_uoffset_t *InstrumentProtocol_Command_vec_t;
typedef flatbuffers_uoffset_t *InstrumentProtocol_Command_mutable_vec_t;
typedef const struct InstrumentProtocol_Configuration_table *InstrumentProtocol_Configuration_table_t;
typedef struct InstrumentProtocol_Configuration_table *InstrumentProtocol_Configuration_mutable_table_t;
typedef const flatbuffers_uoffset_t *InstrumentProtocol_Configuration_vec_t;
typedef flatbuffers_uoffset_t *InstrumentProtocol_Configuration_mutable_vec_t;
typedef const struct InstrumentProtocol_Measurement_table *InstrumentProtocol_Measurement_table_t;
typedef struct InstrumentProtocol_Measurement_table *InstrumentProtocol_Measurement_mutable_table_t;
typedef const flatbuffers_uoffset_t *InstrumentProtocol_Measurement_vec_t;
typedef flatbuffers_uoffset_t *InstrumentProtocol_Measurement_mutable_vec_t;
typedef const struct InstrumentProtocol_Message_table *InstrumentProtocol_Message_table_t;
typedef struct InstrumentProtocol_Message_table *InstrumentProtocol_Message_mutable_table_t;
typedef const flatbuffers_uoffset_t *InstrumentProtocol_Message_vec_t;
typedef flatbuffers_uoffset_t *InstrumentProtocol_Message_mutable_vec_t;
#ifndef InstrumentProtocol_Command_file_identifier
#define InstrumentProtocol_Command_file_identifier 0
#endif
/* deprecated, use InstrumentProtocol_Command_file_identifier */
#ifndef InstrumentProtocol_Command_identifier
#define InstrumentProtocol_Command_identifier 0
#endif
#define InstrumentProtocol_Command_type_hash ((flatbuffers_thash_t)0xc76b8f)
#define InstrumentProtocol_Command_type_identifier "\x8f\x6b\xc7\x00"
#ifndef InstrumentProtocol_Command_file_extension
#define InstrumentProtocol_Command_file_extension "bin"
#endif
#ifndef InstrumentProtocol_Configuration_file_identifier
#define InstrumentProtocol_Configuration_file_identifier 0
#endif
/* deprecated, use InstrumentProtocol_Configuration_file_identifier */
#ifndef InstrumentProtocol_Configuration_identifier
#define InstrumentProtocol_Configuration_identifier 0
#endif
#define InstrumentProtocol_Configuration_type_hash ((flatbuffers_thash_t)0xfb521254)
#define InstrumentProtocol_Configuration_type_identifier "\x54\x12\x52\xfb"
#ifndef InstrumentProtocol_Configuration_file_extension
#define InstrumentProtocol_Configuration_file_extension "bin"
#endif
#ifndef InstrumentProtocol_Measurement_file_identifier
#define InstrumentProtocol_Measurement_file_identifier 0
#endif
/* deprecated, use InstrumentProtocol_Measurement_file_identifier */
#ifndef InstrumentProtocol_Measurement_identifier
#define InstrumentProtocol_Measurement_identifier 0
#endif
#define InstrumentProtocol_Measurement_type_hash ((flatbuffers_thash_t)0x6a713042)
#define InstrumentProtocol_Measurement_type_identifier "\x42\x30\x71\x6a"
#ifndef InstrumentProtocol_Measurement_file_extension
#define InstrumentProtocol_Measurement_file_extension "bin"
#endif
#ifndef InstrumentProtocol_Message_file_identifier
#define InstrumentProtocol_Message_file_identifier 0
#endif
/* deprecated, use InstrumentProtocol_Message_file_identifier */
#ifndef InstrumentProtocol_Message_identifier
#define InstrumentProtocol_Message_identifier 0
#endif
#define InstrumentProtocol_Message_type_hash ((flatbuffers_thash_t)0xe452d03d)
#define InstrumentProtocol_Message_type_identifier "\x3d\xd0\x52\xe4"
#ifndef InstrumentProtocol_Message_file_extension
#define InstrumentProtocol_Message_file_extension "bin"
#endif

typedef int8_t InstrumentProtocol_CommandCode_enum_t;
__flatbuffers_define_integer_type(InstrumentProtocol_CommandCode, InstrumentProtocol_CommandCode_enum_t, 8)
#define InstrumentProtocol_CommandCode_Start ((InstrumentProtocol_CommandCode_enum_t)INT8_C(0))
#define InstrumentProtocol_CommandCode_Stop ((InstrumentProtocol_CommandCode_enum_t)INT8_C(1))

static inline const char *InstrumentProtocol_CommandCode_name(InstrumentProtocol_CommandCode_enum_t value)
{
    switch (value) {
    case InstrumentProtocol_CommandCode_Start: return "Start";
    case InstrumentProtocol_CommandCode_Stop: return "Stop";
    default: return "";
    }
}

static inline int InstrumentProtocol_CommandCode_is_known_value(InstrumentProtocol_CommandCode_enum_t value)
{
    switch (value) {
    case InstrumentProtocol_CommandCode_Start: return 1;
    case InstrumentProtocol_CommandCode_Stop: return 1;
    default: return 0;
    }
}



struct InstrumentProtocol_Command_table { uint8_t unused__; };

static inline size_t InstrumentProtocol_Command_vec_len(InstrumentProtocol_Command_vec_t vec)
__flatbuffers_vec_len(vec)
static inline InstrumentProtocol_Command_table_t InstrumentProtocol_Command_vec_at(InstrumentProtocol_Command_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(InstrumentProtocol_Command_table_t, vec, i, 0)
__flatbuffers_table_as_root(InstrumentProtocol_Command)

__flatbuffers_define_scalar_field(0, InstrumentProtocol_Command, code, InstrumentProtocol_CommandCode, InstrumentProtocol_CommandCode_enum_t, INT8_C(0))

struct InstrumentProtocol_Configuration_table { uint8_t unused__; };

static inline size_t InstrumentProtocol_Configuration_vec_len(InstrumentProtocol_Configuration_vec_t vec)
__flatbuffers_vec_len(vec)
static inline InstrumentProtocol_Configuration_table_t InstrumentProtocol_Configuration_vec_at(InstrumentProtocol_Configuration_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(InstrumentProtocol_Configuration_table_t, vec, i, 0)
__flatbuffers_table_as_root(InstrumentProtocol_Configuration)

__flatbuffers_define_scalar_field(0, InstrumentProtocol_Configuration, measurements_per_second, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(1, InstrumentProtocol_Configuration, samples_per_measurement, flatbuffers_uint32, uint32_t, UINT32_C(0))

struct InstrumentProtocol_Measurement_table { uint8_t unused__; };

static inline size_t InstrumentProtocol_Measurement_vec_len(InstrumentProtocol_Measurement_vec_t vec)
__flatbuffers_vec_len(vec)
static inline InstrumentProtocol_Measurement_table_t InstrumentProtocol_Measurement_vec_at(InstrumentProtocol_Measurement_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(InstrumentProtocol_Measurement_table_t, vec, i, 0)
__flatbuffers_table_as_root(InstrumentProtocol_Measurement)

__flatbuffers_define_vector_field(0, InstrumentProtocol_Measurement, data, flatbuffers_float_vec_t, 0)
typedef uint8_t InstrumentProtocol_MessageType_union_type_t;
__flatbuffers_define_integer_type(InstrumentProtocol_MessageType, InstrumentProtocol_MessageType_union_type_t, 8)
__flatbuffers_define_union(flatbuffers_, InstrumentProtocol_MessageType)
#define InstrumentProtocol_MessageType_NONE ((InstrumentProtocol_MessageType_union_type_t)UINT8_C(0))
#define InstrumentProtocol_MessageType_Command ((InstrumentProtocol_MessageType_union_type_t)UINT8_C(1))
#define InstrumentProtocol_MessageType_Configuration ((InstrumentProtocol_MessageType_union_type_t)UINT8_C(2))
#define InstrumentProtocol_MessageType_Measurement ((InstrumentProtocol_MessageType_union_type_t)UINT8_C(3))

static inline const char *InstrumentProtocol_MessageType_type_name(InstrumentProtocol_MessageType_union_type_t type)
{
    switch (type) {
    case InstrumentProtocol_MessageType_NONE: return "NONE";
    case InstrumentProtocol_MessageType_Command: return "Command";
    case InstrumentProtocol_MessageType_Configuration: return "Configuration";
    case InstrumentProtocol_MessageType_Measurement: return "Measurement";
    default: return "";
    }
}

static inline int InstrumentProtocol_MessageType_is_known_type(InstrumentProtocol_MessageType_union_type_t type)
{
    switch (type) {
    case InstrumentProtocol_MessageType_NONE: return 1;
    case InstrumentProtocol_MessageType_Command: return 1;
    case InstrumentProtocol_MessageType_Configuration: return 1;
    case InstrumentProtocol_MessageType_Measurement: return 1;
    default: return 0;
    }
}


struct InstrumentProtocol_Message_table { uint8_t unused__; };

static inline size_t InstrumentProtocol_Message_vec_len(InstrumentProtocol_Message_vec_t vec)
__flatbuffers_vec_len(vec)
static inline InstrumentProtocol_Message_table_t InstrumentProtocol_Message_vec_at(InstrumentProtocol_Message_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(InstrumentProtocol_Message_table_t, vec, i, 0)
__flatbuffers_table_as_root(InstrumentProtocol_Message)

__flatbuffers_define_union_field(flatbuffers_, 1, InstrumentProtocol_Message, message_type, InstrumentProtocol_MessageType, 0)


#include "flatcc/flatcc_epilogue.h"
#endif /* INSTRUMENT_PROTOCOL_READER_H */
