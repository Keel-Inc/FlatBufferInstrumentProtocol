// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace InstrumentProtocol
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Command : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Command GetRootAsCommand(ByteBuffer _bb) { return GetRootAsCommand(_bb, new Command()); }
  public static Command GetRootAsCommand(ByteBuffer _bb, Command obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Command __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public InstrumentProtocol.CommandCode Code { get { int o = __p.__offset(4); return o != 0 ? (InstrumentProtocol.CommandCode)__p.bb.GetSbyte(o + __p.bb_pos) : InstrumentProtocol.CommandCode.Start; } }

  public static Offset<InstrumentProtocol.Command> CreateCommand(FlatBufferBuilder builder,
      InstrumentProtocol.CommandCode code = InstrumentProtocol.CommandCode.Start) {
    builder.StartTable(1);
    Command.AddCode(builder, code);
    return Command.EndCommand(builder);
  }

  public static void StartCommand(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddCode(FlatBufferBuilder builder, InstrumentProtocol.CommandCode code) { builder.AddSbyte(0, (sbyte)code, 0); }
  public static Offset<InstrumentProtocol.Command> EndCommand(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<InstrumentProtocol.Command>(o);
  }
}


static public class CommandVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Code*/, 1 /*InstrumentProtocol.CommandCode*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
