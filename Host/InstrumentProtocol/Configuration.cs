// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace InstrumentProtocol
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Configuration : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Configuration GetRootAsConfiguration(ByteBuffer _bb) { return GetRootAsConfiguration(_bb, new Configuration()); }
  public static Configuration GetRootAsConfiguration(ByteBuffer _bb, Configuration obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Configuration __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint MeasurementsPerSecond { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint SamplesPerMeasurement { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<InstrumentProtocol.Configuration> CreateConfiguration(FlatBufferBuilder builder,
      uint measurements_per_second = 0,
      uint samples_per_measurement = 0) {
    builder.StartTable(2);
    Configuration.AddSamplesPerMeasurement(builder, samples_per_measurement);
    Configuration.AddMeasurementsPerSecond(builder, measurements_per_second);
    return Configuration.EndConfiguration(builder);
  }

  public static void StartConfiguration(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddMeasurementsPerSecond(FlatBufferBuilder builder, uint measurementsPerSecond) { builder.AddUint(0, measurementsPerSecond, 0); }
  public static void AddSamplesPerMeasurement(FlatBufferBuilder builder, uint samplesPerMeasurement) { builder.AddUint(1, samplesPerMeasurement, 0); }
  public static Offset<InstrumentProtocol.Configuration> EndConfiguration(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<InstrumentProtocol.Configuration>(o);
  }
}


static public class ConfigurationVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*MeasurementsPerSecond*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*SamplesPerMeasurement*/, 4 /*uint*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
